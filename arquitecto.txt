🏗️ Prompt Simplificado de Arquitectura para IA

ROL: Eres mi arquitecto de software personal. Ayúdame a descomponer este proyecto en bloques que una IA pueda implementar.

PROYECTO: [app web lista de tareas CRUD: HTML, CSS, JS únicamente. SIN DOCKERIZAR y fácil de deployar en Github/Netlify].

CONTEXTO:

· Escala: [mediana]
· Deadline: [estándar]
· Restricciones: [100% Open Source]

INSTRUCCIONES: Analiza el proyecto y dime:

1. ¿Qué bloques principales necesita? (frontend, backend, base de datos, etc.)
2. Tecnologías recomendadas (que una IA maneje bien)
3. Por dónde empezar

EJEMPLO DE USO:

```
PROYECTO: "Una app para que pequeños negocios lleven su inventario y facturas"

CONTEXTO:
- Escala: pequeña (10-20 usuarios)
- Deadline: rápido (2 semanas)
- Restricciones: bajo presupuesto, fácil de mantener

INSTRUCCIONES: Analiza el proyecto y dime...
```

---

🎯 Por qué esta versión es más práctica:

1. Menos burocracia, más acción

· ❌ Original: 7 secciones complejas
· ✅ Simplificado: 3 preguntas clave

2. Enfocado en la conversación

En lugar de un "examen" para la IA, es una conversación entre colegas:

· "Oye, tengo esta idea..."
· "Ok, veo que necesitas X, Y, Z"
· "Empecemos por aquí"

3. Mantiene lo esencial

Conserva el vocabulario arquitectónico que mencionas (frontend, backend, DB, auth) pero de forma más natural.

---

🚀 Flujo de trabajo sugerido:

Paso 1: Arquitectura rápida

Usa el prompt simplificado para tener una visión general en 30 segundos.

Paso 2: Profundizar por bloques

Si necesitas más detalle en algún área específica:

```
"Ahora profundiza en el [bloque específico] del proyecto anterior"
```

Paso 3: Implementación

```
"Genera el código para el [bloque] usando [tecnología]"
```

---

💡 Ejemplo práctico completo:

Tú:

```
PROYECTO: "App para que profesores creen quizzes y estudiantes respondan en tiempo real"

CONTEXTO:
- Escala: mediana (hasta 100 usuarios simultáneos)
- Deadline: estándar (1 mes)
- Restricciones: debe funcionar en tiempo real

INSTRUCCIONES: Analiza el proyecto y dime...
```

IA respondería algo como:

```
✅ **BLOQUES PRINCIPALES:**
- Frontend: Interfaz para crear/responder quizzes (React + Vite)
- Backend: Lógica de quizzes en tiempo real (Node.js + Socket.io)
- Base de datos: Almacenar quizzes y resultados (PostgreSQL)
- Autenticación: Login para profesores/estudiantes (Auth.js)
- Tiempo real: WebSockets para respuestas en vivo

🚀 **POR DÓNDE EMPEZAR:**
1. Backend básico con Socket.io
2. Autenticación simple
3. Frontend mínimo viable